import logging
import re
import asyncio
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ParseMode

API_TOKEN = "8149882262:AAEMCuzHHgyqpyWpgH7jmYR3jC6tCG9y4_g"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

def normalize_phone(phone: str) -> str:
    digits = re.sub(r"\D", "", phone)
    if digits.startswith("0"):
        digits = "380" + digits[1:]
    if not digits.startswith("380"):
        digits = "380" + digits
    return "+" + digits

def get_nomerogram_data(phone: str):
    url = f"https://nomerogram.com/number/{phone}"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        r = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(r.text, "html.parser")
        h1 = soup.find("h1")
        name = h1.text.strip() if h1 else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
        bad_keywords = ["–º–æ—à–µ–Ω–Ω–∏–∫", "—Å–ø–∞–º", "–æ–±–º–∞–Ω", "–ª–æ—Ö–æ—Ç—Ä–æ–Ω"]
        comments = soup.find_all("div", class_="comment")
        complaint_count = sum(1 for c in comments if any(k in c.text.lower() for k in bad_keywords))
        return {"name": name, "complaints": complaint_count}
    except:
        return {"name": "–û—à–∏–±–∫–∞", "complaints": -1}

def get_olx_data(phone: str):
    url = f"https://www.olx.ua/list/q-{phone}/"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        r = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(r.text, "html.parser")
        titles = soup.select("div[data-cy='l-card'] h6")
        return titles[0].text.strip() if titles else None
    except:
        return None

def get_getcontact_web(phone: str):
    url = f"https://www.getcontact.com/search?phone={phone}"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        r = requests.get(url, headers=headers, timeout=10)
        return "–î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã" if "result" in r.text.lower() else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    except:
        return "–û—à–∏–±–∫–∞"

@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

@dp.message()
async def check_phone(message: Message):
    raw = message.text.strip()
    phone = normalize_phone(raw)
    phone_plain = phone.replace("+", "")
    await message.answer(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–º–µ—Ä: <b>{phone}</b>")

    nom = get_nomerogram_data(phone_plain)
    olx = get_olx_data(phone_plain)
    getc = get_getcontact_web(phone_plain)

    result = f"<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É {phone}</b>\n\n"

    result += f"üë§ –ò–º—è (nomerogram): {nom['name']}\n"
    if nom["complaints"] > 0:
        result += f"‚ö†Ô∏è –ñ–∞–ª–æ–±: {nom['complaints']}\n"
    elif nom["complaints"] == 0:
        result += f"‚úÖ –ñ–∞–ª–æ–± –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
    else:
        result += f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∂–∞–ª–æ–±—ã\n"

    result += f"üì¨ GetContact Web: {getc}\n"
    result += f"üì¶ OLX: {'–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: ' + olx if olx else '–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π'}"

    await message.answer(result)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())